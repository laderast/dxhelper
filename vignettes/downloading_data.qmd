---
title: "Downloading Dataset and Cohort Data"
format: html
---

```{bash}
dx select project-GY19Qz00Yq34kBPz8jj0XKg0
```

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| eval: false
install.packages("remotes")
remotes::install_github("laderast/xvhelper")
```

If we haven't already, we can use `install_dxpy()` to install the dx-toolkit into our reticulate environment (usually `r-reticulate`).

```{r}
library(xvhelper)
library(readr)
#install_dxpy()
```

```{r}
datasets <- find_all_datasets()
datasets
```

If you look at the names in the table above, you'll see that the dataset name follows the following convention:

`{application_id}_{date_dispensed}.dataset`

We will use the latest dataset, which is the top row. We can also find this by using `find_dataset_id`, which will give us the last dataset dispensed:

```{r}
ds_id <- find_dataset_id()
ds_id
```

Now we have our project/dataset id, we can use it to grab metadata. We'l first fetch

```{r}
get_dictionaries(ds_id)
```

```{r}
#explore_field_list(ds_id)
```

```{r}
fields <- c("participant.eid", "participant.p31", "participant.p41202")
extract_data(ds_id, fields)
```

```{r}
codings <- get_coding_table(ds_id)
head(codings)
```

Let's read in the data file in. 

```{r}
#| message: false

data <- readr::read_csv("apollo_ukbrap_synth_pheno_geno_100k.data.csv", show_col_types = FALSE)
head(data)
```

```{r}
data[1:50,] |>
  decode_single(codings) |>
  decode_multi_large_df(codings, df_size = 10) |>
  decode_column_names(codings) |>
  head() |>
  knitr::kable()
```

## Reading in Cohort Information

Working with cohorts is very similar to working with the entire dataset. Let's list the cohorts in our project:

```{r}
cohorts <- find_all_cohorts()
cohorts
```

```{r}
fields <- c("participant.eid", "participant.p31", "participant.p41202")
cohort_id <- cohorts$project_record[1]
extract_data(cohort_id, fields)
```
```{r}
cohort1 <- readr::read_csv("female_control_3.0.data.csv")
knitr::kable(cohort1[1:10,])
```

We can decode our cohort in the same way:

```{r}
cohort1[1:10,] |>
  decode_single(codings) |>
  decode_multi_purrr(codings) |>
  decode_column_names(codings)
```
